Introducing Dictionaries:
1. One-to-One relationship between keys and values.
2. Keys will be unique. Assigning a value to an existing key will wipe out the old value
3. Unordered.
4. Dictionary keys are case-sensitive.
5. Dictionary keys can be strings, integers, and few other types (immutable types).
6. del keyword used to delete individual item from dictionary by key.
7. clear method deletes all items from dictionary.
8. keys method of a dictionary returns a list of all keys. The list is not in the order in which the dictionary was defined(as dictionary are unordered), but it is a list.
9. The values method retuns a list of all the values. The list is in the same order as the list returned by keys, so {}.values()[n] == {}[{}.keys()[n]] for all values of n. ({} --> represents a dictionary variable)
10. items method returns a list of tuple of the form (key, value)

Introducing Lists:
1. A list is an ordered set of elements enclosed in square brackets.
2. elements can be accessed using index. Index starts from 0.
3. A negative index accesses elements from the end of the list counting backwards
4. You can get a subset of list, called a "slice" by specifying two indices. The Return value is a new list conataining all the elements of the list, in order, starting with the fist slice index, up to but not including the second slice index.
5. Slicing reading the list from left to right, the first slice index specifies the first element you want, and the second slice index specifies the first element you don't want. The return value is everything in between.
6. <listname>[:] is shorthand for making a complete copy of a list.
7. Adding element to list -->
	a.) append method adds a single element to the end of list.
	b.) insert method inserts a single element into a list. The numeric argument is the index of the first element that gets bumped out of position.
	c.) extend method concatenates lists. Note that you don't call extend with multiple arguments; you call it with one argument, a list.
8. index method is used to search a list. It finds the first occurence of a value in the list and returns the index. It the value is not found in the list, Python raises an exception.
9. in keyword/operator can be used to test whether a value is in the list. It returns True if the value is found or False if it is not.
10. Python had no separate boolean datatype. To compensate for this, Python accepted almost anything in a boolena context(like an if statement), according to the following rules.
	-> 0 is false, all other numbers are true.
	-> An empty string("")is false, all other strings are true.
	-> An empty list([]) is false, all other lists are true.
	-> An empty tuple(()) is false, all other tuples are true.
	-> An empty dictionary({}) is false, all other dictionaries are true.
11. Deleting list Elements-->
	a.) remove method removes first (and only first in case of multiple occurence) occurence of a value from a list. If calue is not found in list, Python raises an exception
	b.) pop method removes last element of the list, and returns the value that is remove. Note that this different from li[-1], which returns a value but does not change list, and different from li.remove(value), which changes the list but does not return a value.
12. Lists can also be concatenated with + operator. list = list + otherlist has the same result as list.extend(otherlist). But the + operator returns a new (concatenated) list as value, whereas extend only alters an existing list. This means the extend is faster, especially for large lists.


Introducing tuple:
1. A tuple is an immutable list. A tuple can not be changesd in any way once it is created.
2. Defined as same way as lit, except that the whole set of elemnts  is enclosed in parentheses instead of square brackets.
3. tuple have a defined order, just like a list.
4. Index works same way as of list.
5. Slicing works too. Slicing returns a new tuple, similarly to list.
6. tuples have no method.
7. However in operator/keyword work same as list and see if an element exists in tuple.
8. tuples are faster that lists.
9. It makes your code safer if you write-protect data that does not need to be changed.
10. Tuples can be used as keys in a dictionary, but list can't be used. (Only tuples of string, numbers or other dictionary-safe tuples can be used as dictionary keys)
11. Tuples are used in string formatting.
12. Built-in tuple function takes a list and returns a tuple with the same elements, and the list function takes a tuple and returns a list.

Declaring variables:
1. Variables spring into existence by being assigned a value, and they are automatically destroyed when they go out of scope.
2. When a command is split among several lines with the line-continuation marker("\"), the continued lines can be indented in any manner.

Mapping List:
1. List comprehension is a compact way of mapping a list into another list by applying a function to each of the elements of the lists. 
2. List comprehension do not change the original list.
3. It is safe to assign the result of list comprehension to the variable that you're mapping. Python constructs the new list in memory, and when the list compreshension is complete, it assigns the result to the variable.

Joining List and Splitting Strings :
1. To join any list of strings into a single string, use join method of a string object.Join works only on lists of string. It does not do any type coercion. Joining a list that has one or more non-string elements will raise an exception.
2. split method reverse join by splitting a string into a multi-element list. Split method takes an optional second argument, which is the number of times to split.
3. anystring.split(delimiter, 1) is a useful technique when you want to search a string for a substring and then work with everything before the substring(which ends up in the first element of the returned list) and everything after it(which ends up in the second element). 
